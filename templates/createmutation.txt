import React, { Component, useEffect} from "react"
import * as Yup from "yup"
import { gql, useMutation } from '@apollo/client'
import { Formik, Form, Field, useFormikContext} from "formik"
import { withRouter } from "react-router"

const [@[gqlconst]@] = gql`
    mutation [@[muationvariablename]@] (
        {% for key,value in variables.items() %} $[@[ key ]@]: {% if value == "TextArea" %}String {% else %}[@[value]@]{% endif %}
        {% endfor %}) {
        [@[ mutationname ]@] (
            input: {
                {% for key,value in variables.items() %} [@[ key ]@]: $[@[key]@]
                {% endfor %} }
        ) {
            [@[ mutationout ]@]
        }
    }
`

const FocusError = () => {
  const { errors, isSubmitting, isValidating } = useFormikContext()

  useEffect(() => {
    if (isSubmitting && !isValidating) {
      let keys = Object.keys(errors)
      if (keys.length > 0) {
        const selector = `[for=${keys[0]}]`
        // console.log(selector)
        const errorElement = document.querySelector(selector)
        // console.log(errorElement)
        if (errorElement) {
          errorElement.scrollIntoView()
        }
      }
    }
  }, [errors, isSubmitting, isValidating])

  return null
}

function SubmittingWheel(props) {
  const isSubmitting = props.isSubmitting
  const isValid = props.isValid
  const mutationLoading = props.mutationLoading
  const error = props.error
  // console.log(isSubmitting, isValid);
  if (isSubmitting && isValid && mutationLoading ) {
    return <div><br/> Submitting... âŒ›</div>
  } else {
    return <React.Fragment></React.Fragment>
  }
}

function [@[muationvariablename]@]Form(props) {
    const [[@[ mutationname ]@]Call, { loading: mutationLoading, error: mutationError }] = useMutation([@[gqlconst]@])
    // const [count, setCount] = useState(0);

    return (
        <Formik 
          initialValues= {{
            {% for key,value in variables.items() %} [@[ key ]@]: "", 
            {% endfor %} }}
          validationSchema = {Yup.object().shape({
            {% for key,value in variables.items() %} [@[ key ]@]: Yup.{% if value == "String" or value == "TextArea" %}string(){% elif value  == "Int" %}number(){% endif %}.required("Message"),
            {% endfor %}
          })}
          onSubmit={async (values, actions) => {
              //values.countvariable = count
              const data = await [@[ mutationname ]@]Call({ variables: values })
              actions.setSubmitting(false)
              // console.log(data)
              props.history.push(`/thankyou${data.mutationoutputname}`)
          }}        
        >
         {({ handleSubmit, handleBlur, handleChange, errors, touched, isValid, isSubmitting, values, setFieldValue, validateForm }) => (
             <Form onSubmit={handleSubmit}>
                 {mutationError && (
                    <p className="alert alert-danger">
                      {mutationError.graphQLErrors.map(({ message }, i) => (
                        <span key={i}>{message}</span>
                      ))}
                    </p>
                  )}
              {% for key,value in variables.items() %}
                <div className="form-group">
                <label htmlFor="[@[key]@]">[@[key]@]</label>
                {touched.[@[key]@] && errors.[@[key]@] && <p className="alert alert-danger">{errors.[@[key]@]}</p>}
                {% if value == "String" or value == "Int" %}
                <Field name="[@[key]@]" className="form-control" />
                {% elif  value == "TextArea" %}
                <Field name="[@[key]@]" component="textarea" rows="5" className="form-control" />
                {% endif %}
                </div>
              {% endfor %}
              <div className="text-center">
                <button type="submit" className="btn btn-primary">
                  Submit Form
                </button>
                
              </div>
              <SubmittingWheel isValid={isValid} isSubmitting={isSubmitting}   mutationLoading={mutationLoading}/>
              <FocusError />
             </Form>
         )}
        </Formik>
    )
}

class [@[classname]@] extends Component {
  render() {
    const { history } = this.props
    return (
      <React.Fragment>
        <[@[muationvariablename]@]Form history={history} />
      </React.Fragment>
    )
  }
}

export default withRouter([@[classname]@])
